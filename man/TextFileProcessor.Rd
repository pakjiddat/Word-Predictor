% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/text-file-processor.R
\name{TextFileProcessor}
\alias{TextFileProcessor}
\title{Base class for text file processing}
\description{
Provides basic structure for processing text files.
}
\details{
It provides pre-processing, processing and post-processing functions, which
need to be overridden by derived classes. The pre-processing function is
called before reading a file. The process function is called for processing a
line. The post processing function is called on the processed data. It also
provides a method for generating a sample file from an input text file
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{opts}}{The list of file processing options.
save_data -> If the combined processed lines should be saved.
output_file -> Name of the output file used to store the data.}

\item{\code{line_count}}{The number of lines to read and process at a time.}

\item{\code{pp_output}}{The output of the pre-processing step}

\item{\code{p_output}}{The output of the processing step}

\item{\code{file_name}}{The name of the text file to process.}

\item{\code{verbose}}{Indicates if progress data should be printed.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TextFileProcessor$new()}}
\item \href{#method-process_file}{\code{TextFileProcessor$process_file()}}
\item \href{#method-read_file}{\code{TextFileProcessor$read_file()}}
\item \href{#method-read_lines}{\code{TextFileProcessor$read_lines()}}
\item \href{#method-write_file}{\code{TextFileProcessor$write_file()}}
\item \href{#method-format_size}{\code{TextFileProcessor$format_size()}}
\item \href{#method-save_obj}{\code{TextFileProcessor$save_obj()}}
\item \href{#method-read_obj}{\code{TextFileProcessor$read_obj()}}
\item \href{#method-display_msg}{\code{TextFileProcessor$display_msg()}}
\item \href{#method-process}{\code{TextFileProcessor$process()}}
\item \href{#method-post_process}{\code{TextFileProcessor$post_process()}}
\item \href{#method-pre_process}{\code{TextFileProcessor$pre_process()}}
\item \href{#method-clone}{\code{TextFileProcessor$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
It initializes the current object. It is used to set the file name
and verbose options.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TextFileProcessor$new(
  file_name = "./data/sample.txt",
  line_count = 100,
  verbose = 2
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_name}}{The path to the file to clean.}

\item{\code{line_count}}{The number of lines to read and clean at a time.}

\item{\code{verbose}}{Indicates if progress information should be displayed.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-process_file"></a>}}
\if{latex}{\out{\hypertarget{method-process_file}{}}}
\subsection{Method \code{process_file()}}{
Reads the given file one line at a time. It runs the given
pre-processing function before reading the file. It runs the given
line processing function for each line. It optionally saves the
output of line processing after reading the file or after processing
certain number of lines.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TextFileProcessor$process_file(pre_process, process, post_process)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pre_process}}{The pre-processing function.}

\item{\code{process}}{The function used to process each line.}

\item{\code{post_process}}{The function used to perform post processing.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The combined processed data
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-read_file"></a>}}
\if{latex}{\out{\hypertarget{method-read_file}{}}}
\subsection{Method \code{read_file()}}{
Reads the given file and returns its contents.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TextFileProcessor$read_file(file_name, is_csv)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_name}}{The name of the file to read.}

\item{\code{is_csv}}{If the data is a csv file}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The file data
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-read_lines"></a>}}
\if{latex}{\out{\hypertarget{method-read_lines}{}}}
\subsection{Method \code{read_lines()}}{
Reads the given number of lines from the given file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TextFileProcessor$read_lines(file_name, line_count)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_name}}{The name of the file to read.}

\item{\code{line_count}}{The number of lines to read.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The file data
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-write_file"></a>}}
\if{latex}{\out{\hypertarget{method-write_file}{}}}
\subsection{Method \code{write_file()}}{
Writes the given data to the given file. The data may be appended to
an existing file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TextFileProcessor$write_file(data, file_name, is_append)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{The data to be written.}

\item{\code{file_name}}{The name of the file.}

\item{\code{is_append}}{Indicates if data should be saved.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format_size"></a>}}
\if{latex}{\out{\hypertarget{method-format_size}{}}}
\subsection{Method \code{format_size()}}{
Calculates the size of the given object or formats the given bytes
object as a number without units. The returned number is the size in
Mb.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TextFileProcessor$format_size(obj)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{obj}}{An object of class bytes or an object whoose size is to be
found.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The size formatted as a string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-save_obj"></a>}}
\if{latex}{\out{\hypertarget{method-save_obj}{}}}
\subsection{Method \code{save_obj()}}{
Saves the given object as a file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TextFileProcessor$save_obj(obj, file_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{obj}}{The object to save.}

\item{\code{file_name}}{The file name.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-read_obj"></a>}}
\if{latex}{\out{\hypertarget{method-read_obj}{}}}
\subsection{Method \code{read_obj()}}{
Reads the contents of the given file. Loads the file
contents to a R object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TextFileProcessor$read_obj(file_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_name}}{The file name.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The loaded R obj.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-display_msg"></a>}}
\if{latex}{\out{\hypertarget{method-display_msg}{}}}
\subsection{Method \code{display_msg()}}{
Prints the given message depending on verbose settings.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TextFileProcessor$display_msg(msg, min_debug)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{msg}}{The message to be printed.}

\item{\code{min_debug}}{The minimum debugging level}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-process"></a>}}
\if{latex}{\out{\hypertarget{method-process}{}}}
\subsection{Method \code{process()}}{
Performs processing on the data. It should be
overriden by a derived class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TextFileProcessor$process(lines)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{lines}}{The lines to process}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-post_process"></a>}}
\if{latex}{\out{\hypertarget{method-post_process}{}}}
\subsection{Method \code{post_process()}}{
Performs post-processing on the processed data. It should be
overriden by a derived class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TextFileProcessor$post_process()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-pre_process"></a>}}
\if{latex}{\out{\hypertarget{method-pre_process}{}}}
\subsection{Method \code{pre_process()}}{
Performs pre-processing on the processed data. It should be
overriden by a derived class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TextFileProcessor$pre_process()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TextFileProcessor$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
