% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tp-generator.R
\name{TPGenerator}
\alias{TPGenerator}
\title{It is used to generate the transition probabilities}
\description{
It implements Markov Chains for ngrams. It generates transition
probabilities for ngrams.
}
\details{
It reads ngram frequencies from an input text file. It parses each
ngram into a prefix, a next word and the next word frequency. The prefix is
converted to a numeric hash using the digest2int function from the digest
package. The next word is replaced with the position of the next word in the
list of all words. The data is stored in a data frame. It may be saved to a
file.
}
\section{Super class}{
\code{\link[wordpredictor:TextFileProcessor]{wordpredictor::TextFileProcessor}} -> \code{TPGenerator}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TPGenerator$new()}}
\item \href{#method-trim_tp}{\code{TPGenerator$trim_tp()}}
\item \href{#method-generate_tp}{\code{TPGenerator$generate_tp()}}
\item \href{#method-generate_tp_for_n}{\code{TPGenerator$generate_tp_for_n()}}
\item \href{#method-clone}{\code{TPGenerator$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="wordpredictor" data-topic="TextFileProcessor" data-id="display_msg">}\href{../../wordpredictor/html/TextFileProcessor.html#method-display_msg}{\code{wordpredictor::TextFileProcessor$display_msg()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="wordpredictor" data-topic="TextFileProcessor" data-id="format_size">}\href{../../wordpredictor/html/TextFileProcessor.html#method-format_size}{\code{wordpredictor::TextFileProcessor$format_size()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="wordpredictor" data-topic="TextFileProcessor" data-id="post_process">}\href{../../wordpredictor/html/TextFileProcessor.html#method-post_process}{\code{wordpredictor::TextFileProcessor$post_process()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="wordpredictor" data-topic="TextFileProcessor" data-id="pre_process">}\href{../../wordpredictor/html/TextFileProcessor.html#method-pre_process}{\code{wordpredictor::TextFileProcessor$pre_process()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="wordpredictor" data-topic="TextFileProcessor" data-id="process">}\href{../../wordpredictor/html/TextFileProcessor.html#method-process}{\code{wordpredictor::TextFileProcessor$process()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="wordpredictor" data-topic="TextFileProcessor" data-id="process_file">}\href{../../wordpredictor/html/TextFileProcessor.html#method-process_file}{\code{wordpredictor::TextFileProcessor$process_file()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="wordpredictor" data-topic="TextFileProcessor" data-id="read_file">}\href{../../wordpredictor/html/TextFileProcessor.html#method-read_file}{\code{wordpredictor::TextFileProcessor$read_file()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="wordpredictor" data-topic="TextFileProcessor" data-id="read_lines">}\href{../../wordpredictor/html/TextFileProcessor.html#method-read_lines}{\code{wordpredictor::TextFileProcessor$read_lines()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="wordpredictor" data-topic="TextFileProcessor" data-id="read_obj">}\href{../../wordpredictor/html/TextFileProcessor.html#method-read_obj}{\code{wordpredictor::TextFileProcessor$read_obj()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="wordpredictor" data-topic="TextFileProcessor" data-id="save_obj">}\href{../../wordpredictor/html/TextFileProcessor.html#method-save_obj}{\code{wordpredictor::TextFileProcessor$save_obj()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="wordpredictor" data-topic="TextFileProcessor" data-id="write_file">}\href{../../wordpredictor/html/TextFileProcessor.html#method-write_file}{\code{wordpredictor::TextFileProcessor$write_file()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
It initializes the current obj. It is used to set the verbose option.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TPGenerator$new(verbose = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{If progress information should be displayed.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-trim_tp"></a>}}
\if{latex}{\out{\hypertarget{method-trim_tp}{}}}
\subsection{Method \code{trim_tp()}}{
It groups the given tp data by prefix. Each prefix has
the top c next words with the highest probabilities. All other next
words are removed. The trimmed tp data may be saved to a file or
returned. The file is saved with the suffix -min.
e.g model-4-min.RDS.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TPGenerator$trim_tp(opts)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{opts}}{The options for trimming the tp data.
save_tp -> If the data should be saved.
dir -> The dir where the output file should be saved.
c -> The top c next words per ngrams prefix.
m -> The maximum ngram number supported by the model.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-generate_tp"></a>}}
\if{latex}{\out{\hypertarget{method-generate_tp}{}}}
\subsection{Method \code{generate_tp()}}{
It generates the transition probabilities for the given
ngram numbers It first generates the transition probabilities for
each ngram number. The transition probabilities are then combined
into a single data frame. The data frame may be saved to a file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TPGenerator$generate_tp(opts)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{opts}}{The options for generating the transition probabilities.
save_tp -> If the data should be saved.
n_range -> The range of ngram numbers.
dir -> The dir where the output file should be saved.
format -> The format for the output. There are two options.
'plain' -> The data is stored in plain text.
'obj' -> The data is stored as a R obj.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-generate_tp_for_n"></a>}}
\if{latex}{\out{\hypertarget{method-generate_tp_for_n}{}}}
\subsection{Method \code{generate_tp_for_n()}}{
It reads ngram token frequencies from an input text
file. It generates a data frame containing the prefix, next word
and next word frequency. The data frame may be saved to a file as
plain text or as a R obj. For n = 1, the list of words is saved.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TPGenerator$generate_tp_for_n(opts)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{opts}}{The options for generating the transition probabilities.
save_tp -> If the data should be saved.
n -> The ngram number
dir -> The location of  the input and output files.
format -> The format of the input and output files. Options are:
'plain' -> The data is stored in plain text.
'obj' -> The data is stored as a R obj.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TPGenerator$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
